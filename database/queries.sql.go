// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"
)

const deleteConfigByName = `-- name: DeleteConfigByName :exec
DELETE FROM config_defaults WHERE name = ?
`

func (q *Queries) DeleteConfigByName(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteConfigByName, name)
	return err
}

const getAllConfigs = `-- name: GetAllConfigs :many
SELECT content, name, path FROM config_defaults
`

type GetAllConfigsRow struct {
	Content string
	Name    string
	Path    string
}

func (q *Queries) GetAllConfigs(ctx context.Context) ([]GetAllConfigsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllConfigs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllConfigsRow
	for rows.Next() {
		var i GetAllConfigsRow
		if err := rows.Scan(&i.Content, &i.Name, &i.Path); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConfigDefaultByName = `-- name: GetConfigDefaultByName :one
SELECT content, name, file_name, path FROM config_defaults WHERE name = ?
`

type GetConfigDefaultByNameRow struct {
	Content  string
	Name     string
	FileName string
	Path     string
}

func (q *Queries) GetConfigDefaultByName(ctx context.Context, name string) (GetConfigDefaultByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getConfigDefaultByName, name)
	var i GetConfigDefaultByNameRow
	err := row.Scan(
		&i.Content,
		&i.Name,
		&i.FileName,
		&i.Path,
	)
	return i, err
}

const getRegisteredPrograms = `-- name: GetRegisteredPrograms :many
SELECT program, file_name FROM registered_programs
`

type GetRegisteredProgramsRow struct {
	Program  string
	FileName string
}

func (q *Queries) GetRegisteredPrograms(ctx context.Context) ([]GetRegisteredProgramsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRegisteredPrograms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRegisteredProgramsRow
	for rows.Next() {
		var i GetRegisteredProgramsRow
		if err := rows.Scan(&i.Program, &i.FileName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertConfigDefaults = `-- name: InsertConfigDefaults :exec
INSERT INTO config_defaults
    (name, file_name, path, program, content)
VALUES
    (?, ?, ?, ?, ?)
`

type InsertConfigDefaultsParams struct {
	Name     string
	FileName string
	Path     string
	Program  string
	Content  string
}

func (q *Queries) InsertConfigDefaults(ctx context.Context, arg InsertConfigDefaultsParams) error {
	_, err := q.db.ExecContext(ctx, insertConfigDefaults,
		arg.Name,
		arg.FileName,
		arg.Path,
		arg.Program,
		arg.Content,
	)
	return err
}

const insertDefaultRegisteredPrograms = `-- name: InsertDefaultRegisteredPrograms :exec
INSERT OR IGNORE INTO registered_programs
    (program, file_name)
VALUES
    ('sqlc', 'sqlc.yaml')
`

func (q *Queries) InsertDefaultRegisteredPrograms(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, insertDefaultRegisteredPrograms)
	return err
}

const registerNewConfigFile = `-- name: RegisterNewConfigFile :exec
INSERT INTO registered_programs
    (program, file_name)
VALUES
    (?, ?)
`

type RegisterNewConfigFileParams struct {
	Program  string
	FileName string
}

func (q *Queries) RegisterNewConfigFile(ctx context.Context, arg RegisterNewConfigFileParams) error {
	_, err := q.db.ExecContext(ctx, registerNewConfigFile, arg.Program, arg.FileName)
	return err
}
